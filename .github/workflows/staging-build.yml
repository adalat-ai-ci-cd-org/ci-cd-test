name: Bump version and update image.tag

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Allows creating and pushing tags 
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Install yq
        run: |
          ls -la
          sudo apt-get update && sudo apt-get install -y jq
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Debug Secrets
        run: |
          if [ -z "${{ secrets.CI_CD_SECRET }}" ]; then
            echo "ERROR: CI_CD_SECRET is EMPTY!"
            exit 1
          else
            echo "‚úÖ CI_CD_SECRET is SET."
          fi

      - name: Debug Private Key
        run: |
          printf "%s\n" "${{ secrets.CI_CD_SECRET }}" > private-key.pem
          echo "üîç Checking Private Key Format..."
          head -5 private-key.pem  # Show first 5 lines (should start with -----BEGIN RSA PRIVATE KEY-----)
          tail -5 private-key.pem  # Show last 5 lines (should end with -----END RSA PRIVATE KEY-----)
          echo "Private Key Length: $(wc -l < private-key.pem) lines"

      - name: Generate GitHub App Token
        id: generate-token
        run: |
          APP_ID=1172473
          INSTALLATION_ID=62382783

          # Convert GitHub Secret to properly formatted private key
          printf "%s\n" "${{ secrets.CI_CD_SECRET }}" > private-key.pem

          # Verify the key format
          echo "Private Key Content:"
          cat private-key.pem
          echo "Private Key Content Printed"

          # Generate JWT token using Ruby
          jwt=$(ruby <<EOF
            require 'openssl'
            require 'jwt'
            private_pem = File.read("private-key.pem")
            private_key = OpenSSL::PKey::RSA.new(private_pem)
            payload = { iat: Time.now.to_i - 60, exp: Time.now.to_i + (10 * 60), iss: ${APP_ID} }
            token = JWT.encode(payload, private_key, 'RS256')
            puts token
          EOF
          )

          echo "‚úÖ JWT Token Generated"
          echo "JWT Token: $JWT"
          echo "‚úÖ JWT Token Generated"

          # Exchange JWT for an Installation Access Token
          ACCESS_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/app/installations/${INSTALLATION_ID}/access_tokens" | jq -r .token)

          echo "::add-mask::$ACCESS_TOKEN"  # Mask token in logs
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Clone the second repo (where values.yaml exists)
        run: |
          git clone --single-branch --branch alpha https://x-access-token:${{ env.ACCESS_TOKEN }}@github.com/adalat-ai-ci-cd-org/ci-cd-charts-test.git second-repo

      - name: Update image.tag in values.yaml
        run: |
          cd second-repo
          echo "Current directory: $(pwd)"
          ls -la ci-cd-test
          NEW_TAG=${{ steps.tag_version.outputs.new_tag }}
          echo "Updating image.tag to ${NEW_TAG}"
          yq eval -i ".image.tag = \"${NEW_TAG}\"" ci-cd-test/values.yaml
          cat ci-cd-test/values.yaml  # for debugging

      - name: Commit and push changes
        run: |
          cd second-repo
          NEW_TAG=${{ steps.tag_version.outputs.new_tag }}
          echo "new tag value is ${NEW_TAG}"
          ls -la ci-cd-test

          echo "printing contents of cloned repo"
          cat ci-cd-test/values.yaml
          echo "finished printing contents of cloned repo"

          # Set Git identity
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

          git add ci-cd-test/values.yaml
          git commit -m "Updated image.tag to ${NEW_TAG}" || echo "No changes to commit"

          # Debug authentication token
          echo "GitHub App Token: ${{ env.ACCESS_TOKEN }}" | sed 's/./& /g'

          # Set the correct authentication URL
          git remote set-url origin https://x-access-token:${{ env.ACCESS_TOKEN }}@github.com/adalat-ai-ci-cd-org/ci-cd-charts-test.git
          git push origin alpha
      